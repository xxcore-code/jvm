plugins {
    id 'groovy'
    id 'java'
    //id 'kotlin2js' version '1.3.21'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
}

group 'com.xxcore.code'
version '2019.3.0-RELEASE'

sourceCompatibility = 1.8

repositories {
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    maven {
        url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
    }
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.3.11'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    //testImplementation "org.jetbrains.kotlin:kotlin-test-js"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    [compileJava]*.options*.encoding = 'UTF-8'
}
compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    [compileTestJava]*.options*.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

//这里只设置了Java的编译没设置Kotlin的编译
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
//原来的文件到这里就全部结束了
//但是我们还要生成jar包并上传到maven中央库
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

//用于存储密码等
apply from: "secrets.gradle"

//生成源码Jar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
// 生成 javadoc jar
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// javadoc 配置，这里是自定义了 java doc 的一些配置
javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    //options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    options.encoding = "UTF-8"  //编码一定要配置否则直接出错
    options.charSet = 'UTF-8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version "${version}"
            from components.java
            artifact sourcesJar
            artifact javadocJar

            // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
            pom {
                name = "jvm"
                description = "JVM languages toolkit"
                url = "https://github.com/xxcore-code/jvm"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "xxcore"
                        name = "xxcore"
                        email = "xxcore"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/xxcore-code/jvm.git"
                    developerConnection = "scm:git:https://github.com/xxcore-code/jvm.git"
                    url = "https://github.com/xxcore-code/jvm"
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatypeRepository"
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = rootProject.sonatypeUsername
                password = rootProject.sonatypePassword
            }
        }
        maven {
            name = 'sonatypeSnapshotRepository'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username = rootProject.sonatypeUsername
                password = rootProject.sonatypePassword
            }
        }
    }
}



gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java's console to read from the console (no good for
        // a CI environment)
        //def console = System.console()
        //console.printf "\n\nWe have to sign some things in this build." +
        //        "\n\nPlease enter your signing details.\n\n"

        //def id = console.readLine("PGP Key Id: ")
        //def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        //def password = console.readPassword("PGP Private Key Password: ")

        //def id = ""
        //def file = ""
        //def password = ""

        allprojects {
            //ext."signing.keyId" = id
            //ext."signing.secretKeyRingFile" = file
            //ext."signing.password" = password
            ext."signing.keyId" = rootProject.keyId
            ext."signing.secretKeyRingFile" = rootProject.secretKeyRingFile
            ext."signing.password" = rootProject.keyPassword
        }

        //console.printf "\nThanks.\n\n"
    }
}

// 签名配置，注意这里的顺序，今天第一次知道 gradle 中的 task 等配置也是有顺序的
// 必须在 publishing 配置之后
signing {
    sign publishing.publications.mavenJava
}